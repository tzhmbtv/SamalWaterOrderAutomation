"""
Telegram –±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ –≤–æ–¥—ã Samal
"""
import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

from config import TELEGRAM_BOT_TOKEN, PRODUCTS, DEFAULT_PRODUCT_ID, DEFAULT_QUANTITY
from database import Database
from samal_api import SamalAPI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
(CHOOSING_ACTION, CHOOSING_PRODUCT, CHOOSING_QUANTITY, ENTERING_NAME, ENTERING_PHONE, 
 ENTERING_ADDRESS, ENTERING_COMMENT, CONFIRMING_ORDER) = range(8)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()


def get_main_menu_keyboard(has_user_data=False):
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = []
    
    if has_user_data:
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–∫–∞–∑–∞
        keyboard.append([KeyboardButton("üö∞ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑")])
    
    keyboard.append([KeyboardButton("üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑")])
    keyboard.append([KeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤")])
    
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    user_data = db.get_user(chat_id)
    has_data = user_data and user_data.get('phone')
    
    welcome_text = f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!\n\n"
    welcome_text += "üö∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∑–∞–∫–∞–∑–∞ –≤–æ–¥—ã Samal!\n\n"
    
    if has_data:
        welcome_text += "‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n"
        welcome_text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üö∞ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑' –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞!\n\n"
    else:
        welcome_text += "–î–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –º–Ω–µ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.\n"
        welcome_text += "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π! üöÄ\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = get_main_menu_keyboard(has_data)
    
    await update.message.reply_text(welcome_text, reply_markup=keyboard)
    return ConversationHandler.END


async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    text = update.message.text
    chat_id = update.effective_chat.id
    user_data = db.get_user(chat_id)
    has_data = user_data and user_data.get('phone')
    
    if text == "üö∞ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑":
        if not has_data:
            await update.message.reply_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.\n"
                "–ù–∞–∂–º–∏—Ç–µ 'üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑'"
            )
            return ConversationHandler.END
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
        recent_orders = db.get_user_orders(chat_id, limit=1)
        
        if recent_orders and len(recent_orders) > 0:
            last_order = recent_orders[0]
            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–¥—É–∫—Ç –ø–æ –∏–º–µ–Ω–∏
            selected_product = None
            for key, product in PRODUCTS.items():
                if product['name'] == last_order['product_name']:
                    selected_product = product
                    context.user_data['product'] = product
                    context.user_data['product_key'] = key
                    context.user_data['quantity'] = last_order['quantity']
                    break
        
        if not selected_product:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥—É–∫—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            context.user_data['product'] = PRODUCTS['18.9–ª']
            context.user_data['product_key'] = '18.9–ª'
            context.user_data['quantity'] = DEFAULT_QUANTITY
        
        # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        return await show_order_confirmation(update, context, user_data)
    
    elif text == "üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑":
        return await order_start(update, context)
    
    elif text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
        await profile(update, context)
        return ConversationHandler.END
    
    elif text == "üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤":
        await history(update, context)
        return ConversationHandler.END
    
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
        keyboard = get_main_menu_keyboard(has_data)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
            reply_markup=keyboard
        )
        return ConversationHandler.END


async def order_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–∫–∞–∑–∞"""
    chat_id = update.effective_chat.id
    user_data = db.get_user(chat_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
    keyboard = []
    for key, product in PRODUCTS.items():
        button_text = f"{product['name']} - {product['price']}‚Ç∏"
        keyboard.append([KeyboardButton(button_text)])
    
    keyboard.append([KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")])
    
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    
    await update.message.reply_text(
        "üö∞ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞:",
        reply_markup=reply_markup
    )
    
    return CHOOSING_PRODUCT


async def product_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    user_choice = update.message.text
    
    if user_choice == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        return await cancel(update, context)
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
    selected_product = None
    for key, product in PRODUCTS.items():
        if product['name'] in user_choice:
            selected_product = product
            context.user_data['product'] = product
            context.user_data['product_key'] = key
            break
    
    if not selected_product:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return CHOOSING_PRODUCT
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    min_qty = selected_product.get('min_qty', 2)
    pack_size = selected_product.get('pack_size', None)
    
    qty_text = f"üì¶ –í—ã –≤—ã–±—Ä–∞–ª–∏: {selected_product['name']}\n\n"
    
    if pack_size:
        qty_text += f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ - 2 —É–ø–∞–∫–æ–≤–∫–∏ (1 —É–ø–∞–∫–æ–≤–∫–∞ = {pack_size} –µ–¥.)\n"
        qty_text += f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–∞–∫–æ–≤–æ–∫ (–º–∏–Ω–∏–º—É–º 2):"
    else:
        qty_text += f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ - {min_qty} –±—É—Ç—ã–ª–∏\n"
        qty_text += f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ç—ã–ª–µ–π:"
    
    await update.message.reply_text(qty_text, reply_markup=ReplyKeyboardRemove())
    
    return CHOOSING_QUANTITY


async def quantity_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    try:
        quantity = int(update.message.text)
        product = context.user_data['product']
        
        min_qty = product.get('min_qty', 2)
        
        if quantity < min_qty:
            await update.message.reply_text(
                f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ - {min_qty}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            return CHOOSING_QUANTITY
        
        context.user_data['quantity'] = quantity
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        chat_id = update.effective_chat.id
        user_data = db.get_user(chat_id)
        
        if user_data and user_data.get('phone') and user_data.get('address'):
            # –î–∞–Ω–Ω—ã–µ –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            return await show_order_confirmation(update, context, user_data)
        else:
            # –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º
            await update.message.reply_text(
                "üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
            )
            return ENTERING_NAME
            
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:"
        )
        return CHOOSING_QUANTITY


async def name_entered(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    context.user_data['first_name'] = update.message.text
    
    await update.message.reply_text(
        "üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +77011234567):"
    )
    
    return ENTERING_PHONE


async def phone_entered(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone = update.message.text
    context.user_data['phone'] = phone
    
    await update.message.reply_text(
        "üè† –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–∞—Ä–∫–æ–≤–∞ 61/1, 1 –ø–æ–¥—ä–µ–∑–¥, 13 —ç—Ç–∞–∂, 28 –∫–≤–∞—Ä—Ç–∏—Ä–∞, –ñ–ö –ê–ª–∞—Ç–∞—É)"
    )
    
    return ENTERING_ADDRESS


async def address_entered(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞"""
    address = update.message.text
    context.user_data['address'] = address
    
    keyboard = [
        [KeyboardButton("–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    
    await update.message.reply_text(
        "üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'):",
        reply_markup=reply_markup
    )
    
    return ENTERING_COMMENT


async def comment_entered(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    comment = update.message.text
    if comment == "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è":
        comment = ""
    
    context.user_data['comment'] = comment
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    chat_id = update.effective_chat.id
    db.save_user(
        chat_id,
        first_name=context.user_data.get('first_name', ''),
        phone=context.user_data.get('phone', ''),
        address=context.user_data.get('address', ''),
        comment=comment
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    user_data = {
        'first_name': context.user_data.get('first_name', ''),
        'phone': context.user_data.get('phone', ''),
        'address': context.user_data.get('address', ''),
        'comment': comment
    }
    
    return await show_order_confirmation(update, context, user_data)


async def show_order_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE, user_data: dict) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    product = context.user_data['product']
    quantity = context.user_data['quantity']
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
    pack_size = product.get('pack_size', 1)
    total_items = quantity * pack_size if pack_size > 1 else quantity
    total_price = product['price'] * quantity
    
    confirmation_text = "üìã –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:\n\n"
    confirmation_text += f"üö∞ –¢–æ–≤–∞—Ä: {product['name']}\n"
    confirmation_text += f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}"
    if pack_size > 1:
        confirmation_text += f" —É–ø–∞–∫–æ–≤–æ–∫ ({total_items} –µ–¥.)"
    else:
        confirmation_text += " –±—É—Ç—ã–ª–µ–π"
    confirmation_text += f"\nüí∞ –°—É–º–º–∞: {total_price}‚Ç∏\n\n"
    
    confirmation_text += f"üë§ –ò–º—è: {user_data.get('first_name', '')}\n"
    confirmation_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user_data.get('phone', '')}\n"
    confirmation_text += f"üè† –ê–¥—Ä–µ—Å: {user_data.get('address', '')}\n"
    if user_data.get('comment'):
        confirmation_text += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {user_data.get('comment', '')}\n"
    
    confirmation_text += "\n‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ? –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑."
    
    keyboard = [
        [KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑")],
        [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    
    await update.message.reply_text(confirmation_text, reply_markup=reply_markup)
    
    return CONFIRMING_ORDER


async def confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞"""
    choice = update.message.text
    chat_id = update.effective_chat.id
    user_data_db = db.get_user(chat_id)
    has_data = user_data_db and user_data_db.get('phone')
    
    if choice == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        keyboard = get_main_menu_keyboard(has_data)
        await update.message.reply_text(
            "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=keyboard
        )
        return ConversationHandler.END
    
    if choice == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑
        await update.message.reply_text(
            "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–∫–∞–∑...",
            reply_markup=ReplyKeyboardRemove()
        )
        
        chat_id = update.effective_chat.id
        product = context.user_data['product']
        quantity = context.user_data['quantity']
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        user_data = db.get_user(chat_id)
        
        # –°–æ–∑–¥–∞–µ–º API –∫–ª–∏–µ–Ω—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑
        api = SamalAPI()
        
        # –ü–æ–ª—É—á–∞–µ–º product_id –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ PRODUCTS
        product_id = None
        for key, prod in PRODUCTS.items():
            if prod['name'] == product['name']:
                product_id = prod['id']
                break
        
        if not product_id:
            product_id = DEFAULT_PRODUCT_ID
        
        result = api.create_order(
            product_id=product_id,
            quantity=quantity,
            user_data={
                'first_name': user_data.get('first_name', ''),
                'phone': user_data.get('phone', ''),
                'address': user_data.get('address', ''),
                'comment': user_data.get('comment', '')
            }
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î
        pack_size = product.get('pack_size', 1)
        total_price = product['price'] * quantity
        order_status = 'success' if result['success'] else 'failed'
        
        order_id = db.save_order(
            chat_id=chat_id,
            product_id=product_id,
            product_name=product['name'],
            quantity=quantity,
            total_price=total_price,
            status=order_status
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_data_final = db.get_user(chat_id)
        has_data = user_data_final and user_data_final.get('phone')
        keyboard = get_main_menu_keyboard(has_data)
        
        if result['success']:
            success_text = "‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
            success_text += f"üö∞ {product['name']}\n"
            success_text += f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
            success_text += f"üí∞ –°—É–º–º–∞: {total_price}‚Ç∏\n\n"
            success_text += "üìû –° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏.\n\n"
            success_text += "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! üíô\n\n"
            success_text += "üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É 'üö∞ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑' –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤!"
            
            await update.message.reply_text(success_text, reply_markup=keyboard)
        else:
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:\n{result['message']}\n\n"
            error_text += "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é."
            
            await update.message.reply_text(error_text, reply_markup=keyboard)
        
        return ConversationHandler.END
    
    await update.message.reply_text(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫."
    )
    return CONFIRMING_ORDER


async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat_id = update.effective_chat.id
    user_data = db.get_user(chat_id)
    has_data = user_data and user_data.get('phone')
    
    keyboard = get_main_menu_keyboard(has_data)
    
    if not has_data:
        await update.message.reply_text(
            "üìù –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n"
            "–ù–∞–∂–º–∏—Ç–µ 'üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑' –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
            reply_markup=keyboard
        )
        return
    
    profile_text = "üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
    profile_text += f"–ò–º—è: {user_data.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    profile_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    profile_text += f"üè† –ê–¥—Ä–µ—Å: {user_data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    if user_data.get('comment'):
        profile_text += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {user_data.get('comment', '')}\n"
    
    await update.message.reply_text(profile_text, reply_markup=keyboard)


async def history(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤"""
    chat_id = update.effective_chat.id
    orders = db.get_user_orders(chat_id, limit=10)
    user_data = db.get_user(chat_id)
    has_data = user_data and user_data.get('phone')
    
    keyboard = get_main_menu_keyboard(has_data)
    
    if not orders:
        await update.message.reply_text(
            "üìú –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.\n"
            "–ù–∞–∂–º–∏—Ç–µ 'üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑' –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.",
            reply_markup=keyboard
        )
        return
    
    history_text = "üìú –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤:\n\n"
    
    for i, order in enumerate(orders, 1):
        status_emoji = "‚úÖ" if order['status'] == 'success' else "‚ùå"
        history_text += f"{i}. {status_emoji} {order['product_name']}\n"
        history_text += f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order['quantity']}\n"
        history_text += f"   –°—É–º–º–∞: {order['total_price']}‚Ç∏\n"
        history_text += f"   –î–∞—Ç–∞: {order['created_at']}\n\n"
    
    await update.message.reply_text(history_text, reply_markup=keyboard)


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    chat_id = update.effective_chat.id
    user_data = db.get_user(chat_id)
    has_data = user_data and user_data.get('phone')
    
    keyboard = get_main_menu_keyboard(has_data)
    
    await update.message.reply_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=keyboard
    )
    
    return ConversationHandler.END


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if not TELEGRAM_BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª —Å —Ç–æ–∫–µ–Ω–æ–º.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ –∑–∞–∫–∞–∑–∞
    order_conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('order', order_start),
            MessageHandler(filters.Regex('^(üö∞ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑|üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑|üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å|üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤)$'), main_menu)
        ],
        states={
            CHOOSING_PRODUCT: [MessageHandler(filters.TEXT & ~filters.COMMAND, product_chosen)],
            CHOOSING_QUANTITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, quantity_chosen)],
            ENTERING_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name_entered)],
            ENTERING_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone_entered)],
            ENTERING_ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, address_entered)],
            ENTERING_COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, comment_entered)],
            CONFIRMING_ORDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_order)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler('start', start))
    application.add_handler(order_conv_handler)
    application.add_handler(CommandHandler('profile', profile))
    application.add_handler(CommandHandler('history', history))
    application.add_handler(CommandHandler('cancel', cancel))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()

